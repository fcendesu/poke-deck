version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: poke-deck-postgres
    environment:
      POSTGRES_DB: pokedeck
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - poke-deck-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Express.js API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: poke-deck-backend
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/pokedeck
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: pokedeck
      DB_USER: postgres
      DB_PASSWORD: postgres
      FRONTEND_URL: http://localhost:3000
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - poke-deck-network
    volumes:
      - ./backend:/app
      - /app/node_modules
    restart: unless-stopped

  # Frontend Next.js
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: poke-deck-frontend
    environment:
      NODE_ENV: production
      BACKEND_URL: http://backend:5000
      NEXT_PUBLIC_API_URL: http://localhost:5000/api
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - poke-deck-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  poke-deck-network:
    driver: bridge
